{"version":3,"sources":["components/Card/Card.js","components/LoadingModal/LoadingModal.js","components/Header/Header.js","components/ErrorModal/ErrorModal.js","App.js","serviceWorker.js","index.js"],"names":["Card","data","useState","clickedElement","setClickedElement","showImage","setShowImage","useEffect","timer","setTimeout","clearTimeout","map","dat","className","id","onClick","e","findClickedRowHandler","key","src","owner","avatar_url","alt","description","Object","keys","files","LoadingModal","Header","title","ErrorModal","message","App","users","setUsers","pageNumber","setPageNumber","isLoaded","setIsLoaded","error","setError","axios","get","process","then","repsonse","catch","err","console","log","currentPage","totalPages","changeCurrentPage","numPage","window","scroll","top","left","behavior","theme","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2SA+BeA,G,YA5BF,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAAW,EACqBC,oBAAS,GAD9B,mBAChBC,EADgB,KACAC,EADA,OAEWF,oBAAS,GAFpB,mBAEhBG,EAFgB,KAELC,EAFK,KAIvBC,qBAAU,WACN,IAAMC,EAAQC,YAAW,WACrBH,GAAa,KACd,KACH,OAAO,kBAAMI,aAAaF,MAC3B,CAACH,IAOJ,OACIJ,EAAKU,KAAI,SAAAC,GAAG,OAAI,yBAAKC,UAAS,kGAA6FV,IAAmBS,EAAIE,GAAK,aAAe,IAClKC,QAAS,SAACC,GAAD,OAPa,SAACA,GAC3BZ,EAAkBY,GAClBV,EAAaU,GAKOC,CAAsBL,EAAIE,KAAKI,IAAKN,EAAIE,IACxD,yBAAKK,IAAKP,EAAIQ,MAAMC,WAAYR,UAAU,kCAAkCS,IAAKV,EAAIW,cACrF,uBAAGV,UAAU,kBAAkBW,OAAOC,KAAKb,EAAIc,OAAO,IACrDrB,IAAcO,EAAIE,GAAK,yBAAKD,UAAU,UAAUM,IAAKP,EAAIQ,MAAMC,WAAYC,IAAKV,EAAIW,cAAkB,WCZpGI,G,MATM,kBACjB,yBAAKd,UAAU,kBACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,mBACf,8C,0CCGGe,G,MANA,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACd,OACI,wBAAIhB,UAAU,QAAQgB,KCKfC,G,MARI,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAClB,OACI,yBAAKlB,UAAU,4CACX,wBAAIA,UAAU,eAAekB,MCoD1BC,EA/CH,WAAO,IAAD,EACU9B,mBAAS,IADnB,mBACT+B,EADS,KACFC,EADE,OAEoBhC,mBAAS,GAF7B,mBAETiC,EAFS,KAEGC,EAFH,OAGgBlC,oBAAS,GAHzB,mBAGTmC,EAHS,KAGCC,EAHD,OAIUpC,oBAAS,GAJnB,mBAITqC,EAJS,KAIFC,EAJE,KAMhBjC,qBAAU,WACRkC,IAAMC,IAAIC,mFAAA,UAAmCR,IAC1CS,MAAK,SAAAC,GAAQ,OAAIX,EAASW,EAAS5C,SACnC2C,MAAK,kBAAMN,GAAY,MACvBQ,OAAM,SAAAC,GACLC,QAAQC,IAAIF,EAAIhB,SAChBS,EAASO,EAAIhB,cAEhB,CAACI,IAaJ,OACEI,EAAQ,kBAAC,EAAD,CAAYR,QAASQ,IAC3B,yBAAK1B,UAAU,OACb,kBAAC,EAAD,CAAQgB,MAAM,UACbQ,EACC,kBAAC,EAAD,CACEpC,KAAMgC,IACH,kBAAC,EAAD,MACP,kBAAC,IAAD,CACEiB,YAAaf,EACbgB,WAAY,IACZC,kBArBkB,SAAAC,GACpBlB,IAAekB,IAGjBf,GAAY,GACZF,EAAciB,GACdC,OAAOC,OAAO,CAAEC,IAAK,EAAGC,KAAM,EAAGC,SAAU,aAgBvCC,MAAM,oBCtCIC,QACW,cAA7BN,OAAOO,SAASC,UAEe,UAA7BR,OAAOO,SAASC,UAEhBR,OAAOO,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEd3B,OAAM,SAAAP,GACLS,QAAQT,MAAMA,EAAMR,c","file":"static/js/main.b6c80bed.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport \"./Card.style.scss\";\r\n\r\nconst Card = ({ data }) => {\r\n    const [clickedElement, setClickedElement] = useState(false);\r\n    const [showImage, setShowImage] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const timer = setTimeout(() => {\r\n            setShowImage(false);\r\n        }, 1000);\r\n        return () => clearTimeout(timer);\r\n    }, [showImage]);\r\n\r\n    const findClickedRowHandler = (e) => {\r\n        setClickedElement(e);\r\n        setShowImage(e);\r\n    }\r\n\r\n    return (\r\n        data.map(dat => <div className={`card-container d-flex flex-column flex-sm-column flex-md-row align-items-center fade-in ${clickedElement === dat.id ? 'clickedRow' : ''}`}\r\n            onClick={(e) => findClickedRowHandler(dat.id)} key={dat.id}  >\r\n            <img src={dat.owner.avatar_url} className=\"profile-image position-relative\" alt={dat.description} />\r\n            <p className=\"file-name ml-3\">{Object.keys(dat.files)[0]}</p>\r\n            {showImage === dat.id ? <img className=\"fadeImg\" src={dat.owner.avatar_url} alt={dat.description} /> : null}\r\n        </div>)\r\n\r\n\r\n    )\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\nimport './LoadingModal.scss';\r\n\r\nconst LoadingModal = () => (\r\n    <div className=\"spin-container\">\r\n        <div className=\"spin-content\">\r\n            <div className=\"loadingspinner\"></div>\r\n            <h1>Loading...</h1>\r\n        </div >\r\n    </div >\r\n);\r\n\r\nexport default LoadingModal;","import React from 'react';\r\nimport \"../../../node_modules/bootstrap/dist/css/bootstrap-grid.min.css\";\r\n\r\n\r\nconst Header = ({ title }) => {\r\n    return (\r\n        <h1 className=\"pl-5\">{title}</h1>\r\n    )\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport \"./ErrorModal.scss\";\r\n\r\nconst ErrorModal = ({ message }) => {\r\n    return (\r\n        <div className=\"error-message-container text-center mt-5\">\r\n            <h1 className=\"color-error\">{message}</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ErrorModal;","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport Card from './components/Card/Card';\nimport LoadingModal from './components/LoadingModal/LoadingModal';\nimport Pagination from \"react-pagination-library\";\nimport \"react-pagination-library/build/css/index.css\";\nimport axios from 'axios';\nimport Header from './components/Header/Header';\nimport ErrorModal from './components/ErrorModal/ErrorModal';\n\n\nconst App = () => {\n  const [users, setUsers] = useState([]);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    axios.get(process.env.REACT_APP_GIT_URL + `${pageNumber}`)\n      .then(repsonse => setUsers(repsonse.data))\n      .then(() => setIsLoaded(true))\n      .catch(err => {\n        console.log(err.message);\n        setError(err.message)\n      })\n  }, [pageNumber]);\n\n\n  const changeCurrentPage = numPage => {\n    if (pageNumber === numPage) {\n      return\n    } else {\n      setIsLoaded(false);\n      setPageNumber(numPage);\n      window.scroll({ top: 0, left: 0, behavior: 'smooth' });\n    }\n  };\n\n  return (\n    error ? <ErrorModal message={error} /> : (\n      <div className=\"App\">\n        <Header title=\"Gists\" />\n        {isLoaded ?\n          <Card\n            data={users}\n          /> : <LoadingModal />}\n        <Pagination\n          currentPage={pageNumber}\n          totalPages={100}\n          changeCurrentPage={changeCurrentPage}\n          theme=\"bottom-border\"\n        />\n      </div>\n    )\n\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}